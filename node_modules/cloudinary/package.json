{
  "_from": "cloudinary",
  "_id": "cloudinary@1.16.0",
  "_inBundle": false,
  "_integrity": "sha512-Tna7JsQ9Drssn/Su3AcTzozDuqMFlY5bIj/476AJMechquxeOEcLF0z5ucUtkAd1N3tR9ndLvVszz7anG6Zp4Q==",
  "_location": "/cloudinary",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "cloudinary",
    "fetchSpec": "latest",
    "name": "cloudinary",
    "raw": "cloudinary",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/cloudinary/-/cloudinary-1.16.0.tgz",
  "_shasum": "d2254a04fc0cacf3cae4ec8fce2005c82e6dc78a",
  "_spec": "cloudinary",
  "_where": "/home/kratos/StudentVerification/pbft",
  "author": {
    "email": "info@cloudinary.com",
    "name": "Cloudinary"
  },
  "bugs": {
    "url": "https://github.com/cloudinary/cloudinary_npm/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "lodash": "^4.17.11",
    "q": "^1.5.1"
  },
  "deprecated": false,
  "description": "Cloudinary NPM for node.js integration",
  "devDependencies": {
    "babel-cli": "^6.26.0",
    "babel-core": "^6.26.3",
    "babel-plugin-transform-runtime": "^6.23.0",
    "babel-polyfill": "^6.26.0",
    "babel-preset-env": "^1.7.0",
    "babel-preset-stage-0": "^6.24.1",
    "babel-register": "^6.26.0",
    "babel-runtime": "^6.26.0",
    "dotenv": "4.x",
    "eslint": "^5.16.0",
    "eslint-config-airbnb-base": "^13.1.0",
    "eslint-plugin-import": "^2.17.2",
    "expect.js": "0.3.x",
    "jsdoc": "^3.5.5",
    "jsdom": "^9.12.0",
    "jsdom-global": "2.1.1",
    "mocha": "^5.0.0",
    "nyc": "^13.0.1",
    "sinon": "^6.1.4",
    "webpack-cli": "^3.2.1"
  },
  "engines": {
    "node": ">=0.6"
  },
  "homepage": "http://cloudinary.com",
  "license": "MIT",
  "main": "cloudinary.js",
  "name": "cloudinary",
  "optionalDependencies": {},
  "readme": "Cloudinary\n==========\n\nCloudinary is a cloud service that offers a solution to a web application's entire image management pipeline.\n\nEasily upload images to the cloud. Automatically perform smart image resizing, cropping and conversion without installing any complex software. Integrate Facebook or Twitter profile image extraction in a snap, in any dimension and style to match your websiteâ€™s graphics requirements. Images are seamlessly delivered through a fast CDN, and much much more.\n\nCloudinary offers comprehensive APIs and administration capabilities and is easy to integrate with any web application, existing or new.\n\nCloudinary provides URL and HTTP based APIs that can be easily integrated with any Web development framework.\n\nFor Node.js, Cloudinary provides an extension for simplifying the integration even further.\n\n## Getting started guide\n![](https://res.cloudinary.com/cloudinary/image/upload/see_more_bullet.png)  **Take a look at our [Getting started guide for Node.js](https://cloudinary.com/documentation/node_integration#node_js_getting_started_guide)**.\n\n\n## Setup ######################################################################\n\nnpm install cloudinary\n\n## Try it right away\n\nSign up for a [free account](https://cloudinary.com/users/register/free) so you can try out image transformations and seamless image delivery through CDN.\n\n*Note: Replace `demo` in all the following examples with your Cloudinary's `cloud name`.*\n\nAccessing an uploaded image with the `sample` public ID through a CDN:\n\n    http://res.cloudinary.com/demo/image/upload/sample.jpg\n\n![Sample](https://res.cloudinary.com/demo/image/upload/w_0.4/sample.jpg \"Sample\")\n\nGenerating a 150x100 version of the `sample` image and downloading it through a CDN:\n\n    http://res.cloudinary.com/demo/image/upload/w_150,h_100,c_fill/sample.jpg\n\n![Sample 150x100](https://res.cloudinary.com/demo/image/upload/w_150,h_100,c_fill/sample.jpg \"Sample 150x100\")\n\nConverting to a 150x100 PNG with rounded corners of 20 pixels:\n\n    http://res.cloudinary.com/demo/image/upload/w_150,h_100,c_fill,r_20/sample.png\n\n![Sample 150x150 Rounded PNG](https://res.cloudinary.com/demo/image/upload/w_150,h_100,c_fill,r_20/sample.png \"Sample 150x150 Rounded PNG\")\n\nFor plenty more transformation options, see our [image transformations documentation](http://cloudinary.com/documentation/image_transformations).\n\nGenerating a 120x90 thumbnail based on automatic face detection of the Facebook profile picture of Bill Clinton:\n\n    http://res.cloudinary.com/demo/image/facebook/c_thumb,g_face,h_90,w_120/billclinton.jpg\n\n![Facebook 90x120](https://res.cloudinary.com/demo/image/facebook/c_thumb,g_face,h_90,w_120/billclinton.jpg \"Facebook 90x200\")\n\nFor more details, see our documentation for embedding [Facebook](https://cloudinary.com/documentation/facebook_profile_pictures) and [Twitter](https://cloudinary.com/documentation/twitter_profile_pictures) profile pictures.\n\n\n## Usage\n\n### Configuration\n\nEach request for building a URL of a remote cloud resource must have the `cloud_name` parameter set.\nEach request to our secure APIs (e.g., image uploads, eager sprite generation) must have the `api_key` and `api_secret` parameters set. See [API, URLs and access identifiers](https://cloudinary.com/documentation/solution_overview#account_and_api_setup) for more details.\n\nSetting the `cloud_name`, `api_key` and `api_secret` parameters can be done either directly in each call to a Cloudinary method, by calling the cloudinary.config(), or by using the CLOUDINARY_URL environment variable.\n\n### Require the Cloudinary library\n\n```js\nvar cloudinary = require('cloudinary').v2\n```\n\n### Overriding the request agent\nTo override the request agent pass the agent into any method that makes a\nrequest and it will be used instead of the normal https agent. e.g\n\n```js\ncloudinary.uploader.upload_stream(\n  { agent: myAgent },\n  function(error, result) { console.log(result); }\n);\n\n```\n\n### Embedding and transforming images\n\nAny image uploaded to Cloudinary can be transformed and embedded using powerful view helper methods:\n\nThe following example generates the url for accessing an uploaded `sample` image while transforming it to fill a 100x150 rectangle:\n\n```js\ncloudinary.url(\"sample.jpg\", {width: 100, height: 150, crop: \"fill\"})\n```\n\nAnother example, emedding a smaller version of an uploaded image while generating a 90x90 face detection based thumbnail:\n\n```js\ncloudinary.url(\"woman.jpg\", {width: 90, height: 90, crop: \"thumb\", gravity: \"face\"});\n```\n\nYou can provide either a Facebook name or a numeric ID of a Facebook profile or a fan page.\n\nEmbedding a Facebook profile to match your graphic design is very simple:\n\n```js\ncloudinary.url(\"billclinton.jpg\", {width: 90, height: 130, type: \"facebook\", crop: \"fill\", gravity: \"north_west\"});\n```\n\nSame goes for Twitter:\n\n```js\ncloudinary.url(\"billclinton.jpg\", {type: \"twitter_name\"});\n```\n\n![](https://res.cloudinary.com/cloudinary/image/upload/see_more_bullet.png) **See [our documentation](https://cloudinary.com/documentation/node_image_manipulation) for more information about displaying and transforming images in Node.js**.\n\n### Upload\n\nAssuming you have your Cloudinary configuration parameters defined (`cloud_name`, `api_key`, `api_secret`), uploading to Cloudinary is very simple.\n\nThe following example uploads a local JPG to the cloud:\n\n```js\nvar cloudinary = require('cloudinary').v2;\ncloudinary.uploader.upload(\"my_picture.jpg\", function(error, result) { console.log(result) });\n```\n\nBelow is an example of an upload's result:\n\n```json\n{\n  \"public_id\": \"4srvcynxrf5j87niqcx6w\",\n  \"version\": 1340625837,\n  \"signature\": \"01234567890abcdef01234567890abcdef012345\",\n  \"width\": 200,\n  \"height\": 200,\n  \"format\": \"jpg\",\n  \"resource_type\": \"image\",\n  \"url\": \"http://res.cloudinary.com/demo/image/upload/v1340625837/4srvcynxrf5j87niqcx6w.jpg\",\n  \"secure_url\": \"https://res.cloudinary.com/demo/image/upload/v1340625837/4srvcynxrf5j87niqcx6w.jpg\"\n}\n```\n\nThe uploaded image is assigned a randomly generated public ID. The image is immediately available for download through a CDN:\n\n```js\ncloudinary.url(\"abcfrmo8zul1mafopawefg.jpg\");\n\n// http://res.cloudinary.com/demo/image/upload/abcfrmo8zul1mafopawefg.jpg\n```\nYou can also specify your own public ID:\n\n```js\ncloudinary.uploader.upload(\n  \"http://www.example.com/image.jpg\", \n  {public_id: 'sample_remote'}, \n  function(error, result) { \n    console.log(result) \n  }\n);\n\ncloudinary.url(\"sample_remote.jpg\")\n\n// http://res.cloudinary.com/demo/image/upload/sample_remote.jpg\n\n```\n\n![](https://res.cloudinary.com/cloudinary/image/upload/see_more_bullet.png) **See [our documentation](https://cloudinary.com/documentation/node_image_upload) for plenty more options of uploading to the cloud from your Node.js code or directly from the browser**.\n\n### cloudinary.upload_stream\n\nYou can use cloudinary.upload_stream to write to the uploader as a stream:\n\n```js\nvar fs = require('fs');\nvar stream = cloudinary.uploader.upload_stream(function(error, result) { console.log(result); });\nvar file_reader = fs.createReadStream('my_picture.jpg', {encoding: 'binary'}).on('data', stream.write).on('end', stream.end);\n```\n\n#### Version 1.1 upload_stream change notes\nThe `upload_stream` method was modified to return a `Transform` stream object, we advise to change the `on('data')` and `on('end')` to pipe API:\n\n```js\nvar file_reader = fs.createReadStream('my_picture.jpg').pipe(stream);\n\n```\nif you still need to use event chanining, you can wrap `stream.write` and `stream.end` with wrapper functions\n\n```js\nvar file_reader = fs.createReadStream('my_picture.jpg', {encoding: 'binary'})\n  .on('data', function(data){stream.write(data)})\n  .on('end', function(){stream.end()});\n```\n### cloudinary.image\n\nReturns an html image tag pointing to Cloudinary.\n\nUsage:\n\n```js\ncloudinary.image(\"sample\", {format: \"png\", width: 100, height: 100, crop: \"fill\"})\n\n// <img src='http://res.cloudinary.com/demo/image/upload/c_fill,h_100,w_100/sample.png' height='100' width='100'/>\n```\n\n### Samples\n\nYou can find our simple and ready-to-use samples projects, along with documentation in the [samples folder](https://github.com/cloudinary/cloudinary_npm/tree/master/samples).\nPlease consult with the [README file](https://github.com/cloudinary/cloudinary_npm/blob/master/samples/README.md), for usage and explanations.\n\n\n## Additional resources ##########################################################\n\nAdditional resources are available at:\n\n* [Website](https://cloudinary.com)\n* [Interactive demo](https://demo.cloudinary.com/default)\n* [Documentation](https://cloudinary.com/documentation)\n* [Knowledge Base](https://support.cloudinary.com/hc/en-us)\n* [Documentation for Node.js integration](https://cloudinary.com/documentation/node_integration)\n* [Node.js image upload documentation](https://cloudinary.com/documentation/node_image_upload)\n* [Node.js image manipulation documentation](https://cloudinary.com/documentation/node_image_manipulation)\n* [Image transformations documentation](https://cloudinary.com/documentation/image_transformations)\n\n## Run test\n\n```\nnpm run test\n```\n\n## Support\n\nYou can [open an issue through GitHub](https://github.com/cloudinary/cloudinary_npm/issues).\n\nContact us [https://cloudinary.com/contact](https://cloudinary.com/contact)\n\nStay tuned for updates, tips and tutorials: [Blog](https://cloudinary.com/blog), [Twitter](https://twitter.com/cloudinary), [Facebook](https://www.facebook.com/Cloudinary).\n\n## Join the Community ##########################################################\n\nImpact the product, hear updates, test drive new features and more! Join [here](https://www.facebook.com/groups/CloudinaryCommunity).\n\n\n## License #######################################################################\n\nReleased under the MIT license.\n\nTest resources include the video [Cloud Book Study](https://vimeo.com/27172301)\nwhich was created by [Heidi Neilson](https://vimeo.com/heidineilson)\nand is distributed under the Creative commons - attribution license (CC BY 3.0)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/cloudinary/cloudinary_npm.git"
  },
  "scripts": {
    "compile": "babel lib --out-dir lib-es5 --delete-dir-on-start --verbose",
    "docs": "npm run compile && node_modules/.bin/jsdoc -d docs -r -p lib/*",
    "lint": "eslint .",
    "test": "node_v=$(node --version)z\nif [[ \"${node_v%%.*z}\" == 'v4' ]]\nthen\nnpm run test-es5\nelse\necho 10 && npm run test-es6\nfi",
    "test-es5": "node node_modules/.bin/mocha -R spec --recursive --require 'babel-register' --require 'babel-polyfill' test/",
    "test-es6": "which node && node node_modules/.bin/mocha --ui bdd -R spec --recursive test/"
  },
  "version": "1.16.0"
}
